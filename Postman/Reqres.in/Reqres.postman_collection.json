{
	"info": {
		"_postman_id": "3c0d016e-d896-4ef8-949a-e4802c86fcb3",
		"name": "Reqres",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26343201"
	},
	"item": [
		{
			"name": "LIST USERS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - Status code check \r",
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Assertion 2 - Response value check\r",
							"pm.test(\"Check page number is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.page).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/users?page=2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SINGLE USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - Status code check \r",
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Assertion 2 - Response value check\r",
							"pm.test(\"Check user id is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/users/2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "SINGLE USER NOT FOUND",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - Status code check \r",
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"// Assertion 2 - Response value check\r",
							"\r",
							"pm.test(\"Check if response contains the word data and id\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"data\");\r",
							"    pm.expect(pm.response.text()).to.not.include(\"id\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/users/23",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "LIST <RESOURCE>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - Status code check \r",
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Assertion 2 - Response value check\r",
							"pm.test(\"Check if page and number of id's per page is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.page).to.eql(1);\r",
							"    pm.expect(jsonData.per_page).to.eql(6);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/unknown",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "SINGLE <RESOURCE>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - Status code check \r",
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Assertion 2 - Response value check\r",
							"pm.test(\"Check user id is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/unknown/2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"unknown",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "SINGLE <RESOURCE> NOT FOUND",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - Status code check \r",
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"// Assertion 2 - Response value check\r",
							"\r",
							"pm.test(\"Check if response contains the word data and id\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"data\");\r",
							"    pm.expect(pm.response.text()).to.not.include(\"id\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/unknown/23",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"unknown",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "CREATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - status code check\r",
							"pm.test(\"Check status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Assertion 2 - response value check\r",
							"pm.test(\"Check if the name and job are correct and the variable exist\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Charlie\");\r",
							"    pm.expect(jsonData.job).to.eql(\"Leader\");\r",
							"    pm.expect(pm.response.text()).to.include(\"job\",\"id\");\r",
							"\r",
							"});\r",
							"// Set ID as an environment variable\r",
							"\r",
							"pm.test(\"Set ID as an environment variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"id\", jsonData.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Charlie\",\r\n    \"job\": \"Leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - status code check\r",
							"pm.test(\"Check status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Assertion 2 - response value check\r",
							"pm.test(\"Check if the name and job are correct and the updatedAt exist\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"CharlieEdited\");\r",
							"    pm.expect(jsonData.job).to.eql(\"LeaderEdited\");\r",
							"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"CharlieEdited\",\r\n    \"job\": \"LeaderEdited\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/users/{{id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - status code check\r",
							"pm.test(\"Check status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Assertion 2 - response value check\r",
							"pm.test(\"Check if the name and job are correct and the updatedAt exist\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"CharliePatch\");\r",
							"    pm.expect(jsonData.job).to.eql(\"LeaderPatch\");\r",
							"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"CharliePatch\",\r\n    \"job\": \"LeaderPatch\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/users/2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - Status code check\r",
							"pm.test(\"Check status code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"// Assertion 2 - Response value check\r",
							"pm.test(\"Check if the response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.undefined;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/users/2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "REGISTER - SUCCESSFUL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - status code check\r",
							"pm.test(\"Check status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Assertion 2 - response value check\r",
							"pm.test(\"Check if the name and job are correct and the variable exist\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.text()).to.include(\"id\",\"token\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/register",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "REGISTER - UNSUCCESSFUL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - status code check\r",
							"pm.test(\"Check status code\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"// Assertion 2 - Response value check\r",
							"pm.test(\"Check if password detail was provided\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"Missing password\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/register",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "LOGIN - SUCCESSFUL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - Status code check\r",
							"pm.test(\"Check status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Assertion 2 - Response value check\r",
							"pm.test(\"Check if a token is generated\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"token\");\r",
							"});\r",
							"\r",
							"// Assertion 3 - Response value check\r",
							"pm.test(\"Check if token value is not null\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).not.to.eql(null);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "LOGIN - UNSUCCESSFUL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - status code check\r",
							"pm.test(\"Check status code\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"// Assertion 2 - Response value check\r",
							"pm.test(\"Check if password detail was provided\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"Missing password\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELAYED RESPONSE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertion 1 - Statude code check\r",
							"pm.test(\"Check status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if response time is more than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.above(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if required data is displayed\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.text()).to.include(\"page\",\"per_page\",\"total\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/users?delay=3",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	]
}